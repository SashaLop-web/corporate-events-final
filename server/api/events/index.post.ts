import { defineEventHandler, readBody, createError } from 'h3'
import jwt from 'jsonwebtoken'
import { db } from '~/server/database/db'

interface JwtPayload {
	id: number
	email: string
	role: string
}

export default defineEventHandler(async event => {
	try {
		// –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
		const rawToken = event.headers.get('Authorization')
		if (!rawToken?.startsWith('Bearer ')) {
			throw createError({ statusCode: 401, statusMessage: '–ù–µ—Ç —Ç–æ–∫–µ–Ω–∞' })
		}

		let decoded: JwtPayload
		try {
			decoded = jwt.verify(
				rawToken.split(' ')[1],
				process.env.JWT_SECRET || 'fallback-secret'
			) as JwtPayload
		} catch {
			throw createError({ statusCode: 401, statusMessage: '–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ç–æ–∫–µ–Ω' })
		}

		const body = await readBody(event)
		if (!body || typeof body !== 'object') {
			throw createError({
				statusCode: 400,
				statusMessage: '–ù–µ–≤–µ—Ä–Ω–æ–µ —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞',
			})
		}

		const {
			title,
			event_date,
			type,
			description,
			location,
			location_comment,
			is_announced,
			participants,
			notifyAll,
			department_id,
		} = body

		if (!title || !event_date) {
			throw createError({ statusCode: 400, statusMessage: '–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã—Ö' })
		}

		// –í—Å—Ç–∞–≤–∫–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
		const insertData = {
			title,
			type: type || 'meeting',
			description: description || null,
			organizer_id: decoded.id,
			location: location || null,
			location_comment: location_comment || null,
			event_date,
			is_announced: is_announced || false,
		}

		await db('events').insert(insertData)

		// –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π ID (—Ç–æ–ª—å–∫–æ –¥–ª—è SQLite)
		const [{ id: eventId }] = await db('events').orderBy('id', 'desc').limit(1)

		console.log('üìå –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–æ, id =', eventId)

		const invitedUserIds = new Set<number>()

		// === –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –≤—Å—Ç—Ä–µ—á–∏ ===
		if (type === 'meeting_individual') {
			const validParticipants = Array.isArray(participants)
				? participants.map(Number).filter(id => Number.isInteger(id))
				: []

			if (validParticipants.length === 0) {
				throw createError({
					statusCode: 400,
					statusMessage: '–ù—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–π –≤—Å—Ç—Ä–µ—á–∏',
				})
			}

			for (const userId of validParticipants) {
				invitedUserIds.add(userId)
				await db('invitations').insert({
					event_id: eventId,
					user_id: userId,
					status: 'pending',
					comment: null,
				})
				await db('notifications').insert({
					user_id: userId,
					event_id: eventId,
					message: `–í–∞—Å –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: "${title}"`,
					type: 'event_invite',
					is_read: false,
					scheduled_time: null,
					created_at: new Date().toISOString(),
				})
			}
		}

		// === –í—Å—Ç—Ä–µ—á–∞ –ø–æ –æ—Ç–¥–µ–ª—É ===
		if (type === 'meeting_department') {
			if (!department_id) {
				throw createError({
					statusCode: 400,
					statusMessage: '–ù–µ –≤—ã–±—Ä–∞–Ω –æ—Ç–¥–µ–ª',
				})
			}

			const deptUsers = await db('users').select('id').where({ department_id })

			for (const { id } of deptUsers) {
				invitedUserIds.add(id)
				await db('invitations').insert({
					event_id: eventId,
					user_id: id,
					status: 'pending',
					comment: null,
				})
				await db('notifications').insert({
					user_id: id,
					event_id: eventId,
					message: `–í—ã –ø—Ä–∏–≥–ª–∞—à–µ–Ω—ã –Ω–∞ –≤—Å—Ç—Ä–µ—á—É –æ—Ç–¥–µ–ª–∞: "${title}"`,
					type: 'event_invite',
					is_read: false,
					scheduled_time: null,
					created_at: new Date().toISOString(),
				})
			}
		}

		// === –†–∞—Å—Å—ã–ª–∫–∞ –≤—Å–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º ===
		if (
			notifyAll &&
			!['meeting_individual', 'meeting_department'].includes(type)
		) {
			const employees = await db('users')
				.select('id')
				.where({ role: 'employee' })

			for (const { id } of employees) {
				if (!invitedUserIds.has(id)) {
					await db('notifications').insert({
						user_id: id,
						event_id: eventId,
						message: `–ù–æ–≤–æ–µ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: "${title}"`,
						type: 'event_announce',
						is_read: false,
						scheduled_time: null,
						created_at: new Date().toISOString(),
					})
				}
			}
		}

		console.log('‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã')

		return {
			status: 'success',
			message: '–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ',
			eventId,
		}
	} catch (error: any) {
		console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:', error)
		throw createError({
			statusCode: 500,
			statusMessage: error.message || '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
		})
	}
})
