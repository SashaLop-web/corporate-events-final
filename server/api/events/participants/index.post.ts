import { defineEventHandler, readBody } from 'h3'
import { db } from '~/server/database/db' // üîÅ –∑–∞–º–µ–Ω–∏–ª–∏ getDB –Ω–∞ db

export default defineEventHandler(async event => {
	try {
		const body = await readBody(event)

		if (!body || typeof body !== 'object') {
			throw new Error('–ü—É—Å—Ç–æ–µ –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞')
		}

		const { event_id, user_id, status, comment } = body

		if (!event_id || !user_id) {
			throw new Error('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è')
		}

		// üîÅ —É–±—Ä–∞–ª–∏ getDB
		const [invitationId] = await db('invitations').insert({
			event_id,
			user_id,
			status: status || 'pending',
			comment: comment || null,
		})

		return {
			status: 'success',
			message: '–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ',
			invitationId,
		}
	} catch (error: any) {
		console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è:', error.message)
		event.res.statusCode = 400
		return {
			status: 'error',
			message: error.message || '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
		}
	}
})
